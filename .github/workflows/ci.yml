name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.0"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:23.8
        ports:
          - 8123:8123
          - 9000:9000
        env:
          CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry installation
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-${{ env.POETRY_VERSION }}-${{ runner.os }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

    - name: Install dependencies
      run: poetry install --all-extras

    - name: Run linting
      run: |
        poetry run ruff check .
        poetry run black --check .
        poetry run isort --check-only .

    - name: Run unit tests
      run: poetry run pytest -m "unit" -v --cov=connectors --cov=elt --cov=scraping

    - name: Run smoke tests
      run: poetry run pytest -m "smoke" -v
      env:
        CLICKHOUSE_HOST: localhost
        CLICKHOUSE_PORT: 8123
        CLICKHOUSE_USER: default
        CLICKHOUSE_PASSWORD: ""

  integration:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Create .env file
      run: cp .env.example .env

    - name: Start services
      run: |
        docker compose -f docker-compose.yml up -d --wait
        sleep 30

    - name: Run smoke tests
      run: make smoke

    - name: Check dbt setup
      run: make dbt-version

    - name: Run integration tests
      run: |
        # Set up test environment
        docker compose exec -T clickhouse-server clickhouse-client --query "CREATE DATABASE IF NOT EXISTS political_data_test"
        
        # Run pytest integration tests
        docker compose exec -T airflow-webserver python -m pytest /opt/airflow/tests/test_connectivity.py -m "integration" -v
      continue-on-error: true

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Services ==="
        docker compose ps
        echo "=== ClickHouse Logs ==="
        docker compose logs clickhouse-server
        echo "=== Airflow Logs ==="
        docker compose logs airflow-webserver

    - name: Cleanup
      if: always()
      run: docker compose down -v

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --only=dev

    - name: Run security checks
      run: |
        poetry run safety check
        poetry run bandit -r connectors/ elt/ scraping/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker images
      run: |
        docker compose build
        docker compose config --quiet

    - name: Run final smoke test
      run: |
        docker compose up -d --wait
        sleep 60
        make smoke
        docker compose down -v
